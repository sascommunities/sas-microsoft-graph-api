[{"kind":1,"language":"markdown","value":"# SAS to Microsoft 365 example\r\n\r\nThe first step is to bring in the SAS macros to simplify access to Microsoft 365. In this example, we'll download directly from GitHub. You may decide to download to a local folder and include from there.","outputs":[]},{"kind":2,"language":"sas","value":"/* Allocate a folder for this SAS program */ \r\n/* and download from GitHub               */\r\noptions dlcreatedir;\r\nlibname src \"%sysfunc(getoption(WORK))/src\";\r\nlibname src clear;\r\n%let src = %sysfunc(getoption(WORK))/src;\r\nfilename src \"&src./ms-graph-macros.sas\";\r\n\r\nproc http\r\n method='GET'\r\n url=\"https://raw.githubusercontent.com/sascommunities/sas-microsoft-graph-api/main/ms-graph-macros.sas\"\r\n out=src;\r\nrun;\r\n\r\n%include src;","outputs":[]},{"kind":1,"language":"markdown","value":"Next, we need to establish the path that will hold our config settings and eventually the access token to connect to Microsoft 365. The folder should be in a location that is private to you, as it will hold sensitive information that should be protected. Once generated, the access token/refresh token can be used as credentials for access to your Microsoft 365 content. \r\n\r\nThe config settings should be in a file that you create named `config.json`, with a format like this (of course, substituting your own tenant_id and client_id values that you get from your registered app in the Azure portal):\r\n```\r\n{\r\n  \"tenant_id\": \"206db638-6adb-41b9-b20c-95d8d04abcbe\",\r\n  \"client_id\": \"8fb7804a-8dfd-40d8-bf5b-d02c2cbc56f3\",\r\n  \"redirect_uri\": \"https://login.microsoftonline.com/common/oauth2/nativeclient\",\r\n  \"resource\" : \"https://graph.microsoft.com\"\r\n}\r\n```\r\n\r\nWe'll use the `%initConfig` macro to read this file and establish this folder as the location for your token information. It supports a traditional file path (SAS 9 or SAS Viya) or a SAS Content folder in SAS Viya.\r\n\r\nExample for local files:\r\n```\r\n%initConfig(configPath=C:\\Projects\\ms-graph-examples);\r\n```\r\n\r\nOr in a SAS Viya content folder:\r\n```\r\n%initConfig(configPath=/Users/&_clientuserid/My Folder/.creds,sascontent=1);\r\n```","outputs":[]},{"kind":2,"language":"sas","value":"%initConfig(configPath=C:\\Projects\\ms-graph-examples);","outputs":[]},{"kind":1,"language":"markdown","value":"## First connection: sign in and get auth code\r\n\r\nBefore we can make this a repeatable process, we need to get an access token that we can use and refresh as needed. The first step is to get an authorization code that affirms our app connection and permission for this Microsoft 365 user.\r\n\r\nTo accomplish this, we must visit a URL in our browser to sign in and consent to the permissions needed to read and write content in OneDrive and SharePoint. The `%generateAuthUrl` macro helps with that. Run the macro to build this URL (which will be based on your config data). Copy the generated URL from the SAS log and paste the URL into your web browser. Complete the signin and consent steps, then copy the auth code (the `code=` portion) from the URL for use in the next step.","outputs":[]},{"kind":2,"language":"sas","value":"%generateAuthUrl();","outputs":[]},{"kind":1,"language":"markdown","value":"With the auth code in hand, paste it into a macro assignment and use the `%generate_access_token` method to get that first token. This will generate the token.json file and store it in your config folder.","outputs":[]},{"kind":2,"language":"sas","value":"%let auth_code=;\r\n\r\n/*\r\n  Now that we have an authorization code we can get the access token\r\n  This step will write the token.json file that we can use in our\r\n  production programs.\r\n*/\r\n\r\n%get_access_token(&auth_code.);","outputs":[]},{"kind":1,"language":"markdown","value":"With the token.json created in our config folder, we can initiate a connection to Microsoft 365 and get an active access token.","outputs":[]},{"kind":2,"language":"sas","value":"/* Initialize the session by refreshing the access token */\r\n%initSessionMS365;","outputs":[]},{"kind":1,"language":"markdown","value":"The active token value is stored in the `&access_token` macro variable. We can use this in REST API calls for the Microsoft Graph API. This sample call should return the JSON data about your Microsoft 365 user profile.","outputs":[]},{"kind":2,"language":"sas","value":"filename resp temp;\r\nproc http url=\"https://graph.microsoft.com/v1.0/me\" \r\n  oauth_bearer=\"&access_token\" \r\n  out=resp;\r\nrun;\r\ndata _null_;\r\n    rc=jsonpp('resp','log');\r\nrun;\r\nfilename resp clear;","outputs":[]},{"kind":1,"language":"markdown","value":"## Example workflow with SharePoint Online/Teams folders\r\n\r\nLet's look at content in SharePoint Online. Remember that files that you store in Microsoft Teams channels are also SharePoint behind the scenes, so the process is the same.\r\n\r\nFor this we'll start with the `%listSiteLibraries` macro routine.","outputs":[]},{"kind":2,"language":"sas","value":"/* Let's look at SharePoint / Teams folders */\r\n%let siteHost = sasoffice365.sharepoint.com;\r\n%let sitePath = /sites/SASandMicrosoft365APIdemo;\r\n\r\n%listSiteLibraries( siteHost=&siteHost.,sitepath=&sitePath.,out=libs);\r\n/* store the ID value for the library in a macro variable, where \"Documents\" is at root */\r\nproc sql noprint;\r\n select id into: libraryId from libs where name=\"Documents\";\r\nquit;\r\n\r\n/* LIST TOP LEVEL FOLDERS/FILES */\r\n\r\n/* special macro to pull ALL items from root folder */\r\n%listFolderItems(driveId=&libraryId., folderId=root, out=work.paths);\r\nproc print data=paths (obs=10);\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Drill into that top folder to see the subfolders.","outputs":[]},{"kind":2,"language":"sas","value":"proc sql noprint;\r\n select id into: folderId from work.paths where name=\"Team Content\";\r\nquit;\r\n\r\n%listFolderItems(driveId=&libraryId., folderId=&folderId., out=work.paths);\r\nproc print data=paths (obs=10);\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Now drill into ***that*** folder to see its subfolders and content.","outputs":[]},{"kind":2,"language":"sas","value":"proc sql noprint;\r\n select id into: folderId from work.paths where name=\"Reports\";\r\nquit;\r\n\r\n%listFolderItems(driveId=&libraryId., folderId=&folderId., out=work.paths);\r\nproc print data=paths (obs=10);\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Now that we found the folder that contains the file we want, we can use the ```%downloadFile``` macro to bring it into our SAS session.","outputs":[]},{"kind":2,"language":"sas","value":"%let localFolder = %sysfunc(getoption(WORK));\r\n\r\n%downloadFile(driveId=&libraryId., \r\n  folderId=&folderId., \r\n  sourceFilename=SciFi-AI.xlsx, \r\n  destinationPath=&localFolder.);","outputs":[]},{"kind":1,"language":"markdown","value":"**Note:** We now have the IDs for the SharePoint library (drive) and the folder for this content, we can store them and use in future code, since they will not change. Then next time we want to do this download, we can skip the \"query and discover\" steps and go directly to the download step.","outputs":[]},{"kind":2,"language":"sas","value":"%put &=libraryId.;\r\n%put &=folderId.;\r\n\r\n%let reportLibrary=&libraryId;\r\n%let reportFolder=&folderId;","outputs":[]},{"kind":1,"language":"markdown","value":"With that file downloaded and in a local folder, we can now PROC IMPORT as an Excel file.","outputs":[]},{"kind":2,"language":"sas","value":"/* Downloaded an Excel file into SAS? Now we can PROC IMPORT if we want */\r\nproc import file=\"&localFolder./SciFi-AI.xlsx\" \r\n out=scifi\r\n dbms=xlsx replace;\r\nrun;\r\n\r\n/* Preview the contents of this imported file */\r\nproc print data=scifi (obs=10);\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Now let's use the same iterative 'list folders' techniques to find a destination folder named \"Examples\", and then use the `%uploadFile` macro to send a SAS-generated report file to this Teams/SharePoint folder.\r\n\r\nFirst, let's generate a report in Excel format to share.","outputs":[]},{"kind":2,"language":"sas","value":"filename report \"&localFolder./SciFi-Summary.xlsx\";\r\n\r\nods excel(id=xl) file=report\r\n options(sheet_interval='none' sheet_name='MOVIES');\r\nods graphics on / imagefmt=png;\r\n\r\nTitle \"Top 10 Profitable Sci-Fi Movies\";\r\nproc print data=withProfit(obs=10);\r\n var YearProduced MovieTitle Profit_Loss;\r\nrun;\r\n\r\ntitle height=3 \"Profit amounts by Year\";\r\nproc sgpie data=withProfit;\r\n  styleattrs datacolors=(cXfbb4ae cXb3cde3 cXccebc5 cXdecbe4);\r\n  pie YearProduced / response=Profit_Loss \r\n  datalabelattrs=(Size = 22pt) \r\n  datalabeldisplay=(category percent);\r\nrun;\r\n\r\nods excel(id=xl) close;","outputs":[]},{"kind":1,"language":"markdown","value":"Next, we'll use PROC SQL and subsquent `%listFolderItems` calls to find the ID of the destination folder. Then use `%uploadFile` to send it to our Teams folder.","outputs":[]},{"kind":2,"language":"sas","value":"\r\n/*\r\n  Uploading to:\r\n  https://sasoffice365.sharepoint.com/:f:/r/sites/SASandMicrosoft365APIdemo/Shared%20Documents/Team%20Content/Reports?csf=1&web=1&e=ThVf00\r\n*/\r\n\r\n%uploadFile(driveId=&reportLibrary., folderId=&reportFolder.,\r\n sourcePath=&localFolder.,\r\nsourcefilename=SciFi-Summary.xlsx);","outputs":[]},{"kind":1,"language":"markdown","value":"## Example workflow with OneDrive\r\n\r\nMost of the actions that we can perform with SharePoint folders, we can also do with OneDrive. The main difference is that the API to list OneDrive root content is different, so we have a special routine for that. ","outputs":[]},{"kind":2,"language":"sas","value":"/* Exploration: get the list of top-level drives in OneDrive */\r\n%listMyDrives(out=work.drives);\r\nproc print data=drives;\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"From the available \"drives\", we can use PROC SQL to single out the ID for the main \"Documents\" folder and then list its contents.","outputs":[]},{"kind":2,"language":"sas","value":"/*\r\n If you have multiple drives you can filter \r\n the set with a where clause on the name value.\r\n Note that the system may track additional drives behind-the-scenes, so\r\n don't assume you have just one!\r\n\r\n In my case, the main drive is labeled \"Documents\".\r\n*/\r\n/* store the ID value for the drive in a macro variable */\r\nproc sql noprint;\r\n select id into: driveId from drives where driveDisplayName=\"Documents\";\r\nquit;\r\n\r\n/* LIST TOP LEVEL FOLDERS/FILES */\r\n\r\n/* special macro to pull ALL items from root folder               */\r\n/* Note that the APIs return only 200 items at a time             */\r\n/* This macro will iterate through multiple times to get the full */\r\n/* collection.                                                    */\r\n%listFolderItems(driveId=&driveId., folderId=root, out=work.paths);\r\n/* preview a few of these */\r\nproc print data=paths (obs=10);\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Supposing that we have a folder in OneDrive named \"Projects\", we can now drill into the listing of that folder. Once again we use PROC SQL to single out its identifier. Then we can select a file from that folder to \"download\" into our SAS session. Then it's available to use as input into another step, such as PROC IMPORT for an Excel file. In this example we have an XLSX file named \"ScoreCard2022.xlsx\".","outputs":[]},{"kind":2,"language":"sas","value":"/* LIST ITEMS IN A SPECIFIC FOLDER */\r\n/*\r\n At this point, if you want to act on any of the items, you just replace \"root\" \r\n with the ID of the item. So to list the items in the \"Projects\" folder I have:\r\n  - find the ID for that folder\r\n  - list the items within and save to a data set of items\r\n*/\r\n\r\n/* Find the ID of the folder I want */\r\nproc sql noprint;\r\n select id into: folder from paths\r\n  where name=\"Projects\";\r\nquit;\r\n\r\n/* special macro to list ALL items from a folder */\r\n%listFolderItems(driveId=&driveId., folderId=&folder., out=work.folderItems);\r\n\r\n\r\n/* DOWNLOAD A FILE FROM ONEDRIVE TO SAS SESSION */\r\n/*\r\n With a list of the items in this folder, we can download\r\n any file of interest\r\n*/\r\n%downloadFile(driveId=&driveId., \r\n  folderId=&folder., \r\n  sourceFilename=ScoreCard2022.xlsx, \r\n  destinationPath=%sysfunc(getoption(WORK)));\r\n\r\n/* Downloaded an Excel file into SAS? Now we can PROC IMPORT if we want */\r\nproc import file=\"%sysfunc(getoption(WORK))/ScoreCard2022.xlsx\" \r\n out=xldata\r\n dbms=xlsx replace;\r\nrun;\r\n\r\n/* Preview the contents of this imported file */\r\nproc print data=xldata (obs=10);\r\nrun;","outputs":[]}]